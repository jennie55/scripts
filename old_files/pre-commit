#!/bin/sh

# PRE-COMMIT HOOK
#
# The pre-commit hook is invoked before a Subversion txn is
# committed.  Subversion runs this hook by invoking a program
# (script, executable, binary, etc.) named 'pre-commit' (for which
# this file is a template), with the following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] TXN-NAME     (the name of the txn about to be committed)
#
#   [STDIN] LOCK-TOKENS ** the lock tokens are passed via STDIN.
#
#   If STDIN contains the line "LOCK-TOKENS:\n" (the "\n" denotes a
#   single newline), the lines following it are the lock tokens for
#   this commit.  The end of the list is marked by a line containing
#   only a newline character.
#
#   Each lock token line consists of a URI-escaped path, followed
#   by the separator character '|', followed by the lock token string,
#   followed by a newline.
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# If the hook program exits with success, the txn is committed; but
# if it exits with failure (non-zero), the txn is aborted, no commit
# takes place, and STDERR is returned to the client.   The hook
# program can use the 'svnlook' utility to help it examine the txn.
#
# On a Unix system, the normal procedure is to have 'pre-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
#   ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#   ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#
#   This is why we recommend using the read-only 'svnlook' utility.
#   In the future, Subversion may enforce the rule that pre-commit
#   hooks should not modify the versioned data in txns, or else come
#   up with a mechanism to make it safe to do so (by informing the
#   committing client of the changes).  However, right now neither
#   mechanism is implemented, so hook writers just have to be careful.
#
# Note that 'pre-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'pre-commit.bat' or 'pre-commit.exe',
# but the basic idea is the same.
#
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/

REPOS="$1"
TXN="$2"

# Make sure that the log message contains some text.
SVNLOOK=/usr/bin/svnlook
ECHO=/bin/echo
AWK=/bin/awk
$SVNLOOK log -t "$TXN" "$REPOS" | \
   grep "[a-zA-Z0-9]" > /dev/null || { $ECHO "You must enter a commit message to commit." >&2; exit 1; }

# Check that the author of this commit has the rights to perform
# the commit on the files and directories being modified.
# commit-access-control.pl "$REPOS" "$TXN" commit-access-control.cfg || exit 1

declare -a CLOSED_BRANCHES=('REL_3.4' 'REL_3.40' 'REL_3.50' 'REL_3.51')

PATH_CHANGED=$( $SVNLOOK changed -t "$TXN" "$REPOS" )
for REJ_BRANCH in ${CLOSED_BRANCHES[@]}
do
   $ECHO $PATH_CHANGED | grep "$REJ_BRANCH" && $ECHO "Cannot commit to branch $REJ_BRANCH. Branch has been closed for QA testing." 1>&2 && exit 1
done


#
# 
#
declare -a LEGACY_BRANCHES=( 'ted2legacy' )
PATH_CHANGED=$( $SVNLOOK changed -t "$TXN" "$REPOS" )
for REJ_BRANCH in ${LEGACY_BRANCHES[@]}
do
   $ECHO $PATH_CHANGED | grep "$REJ_BRANCH" && $ECHO "Cannot commit to branch $REJ_BRANCH. Branch has been closed." 1>&2 && exit 1
done

declare -a CLOSED_DB_TRUNK=('nwf_db/1.*/trunk/' 'nwf_db/2.*/trunk/' 'nwf_db/3.*/trunk/' 'nwf_db/4.*/trunk/' 'nwf_db/5.*/trunk/')

PATH_CHANGED=$( $SVNLOOK changed -t "$TXN" "$REPOS" )
for REJ_TRUNK in ${CLOSED_DB_TRUNK[@]}
do
   $ECHO $PATH_CHANGED | $AWK '{ print $2 }' | grep "$REJ_TRUNK" && $ECHO "Cannot commit to Database Trunk $REJ_TRUNK. Trunk has been moved to Git." 1>&2 && exit 1
done

##########################################################################################
# To be released with 3.47

# check db
#COMMENT=$($SVNLOOK log -t "$TXN" "$REPOS")
#$ECHO $PATH_CHANGED | grep "nwf_db"
#NWFDB_FOUND=$?
#if [ $NWFDB_FOUND -eq 0 ] ; then
#   VERSION_IN=$($ECHO $COMMENT | grep "[0-9].[0-9]*.[0-9]")
#   VER_FOUND=$?
#   $ECHO $PATH_CHANGED | $ECHO "$PATH_CHANGED::$COMMENT::$VERSION_IN::$VER_FOUND" 1>&2 
#   if [ $VER_FOUND -ne 0 ] ; then
#      $ECHO "No version found in log" 1>&2 && exit 1
#   fi
#fi

##########################################################################################



#
# All checks passed, so allow the commit.
exit 0
